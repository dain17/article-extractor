脆弱性「Log4Shell」から考える--OSSの信頼性とセキュリティリスクの管理の画像
Java向けのログ出力ライブラリー「Apache Log4j」に見つかった脆弱性「Log4Shell」には1つの予測可能な結果があり、ビジネスリーダーと政府は“オープンソース”に関する懸念を強めています。

　成功につながるソフトウェアの多くが商用ベンダーではなくボランティアによって作成されていること、最も重要なシステムの一部でオープンソースソフトウェアが使用されていることをほとんどの人は知りません。さらに、ほとんどの人は、成功につながるすべてのオープンソースソフトウェアのリストを確信を持って提示することができません。

　SSL/TLS実装ライブラリー「OpenSSL」に見つかった「HeartBleed」やLinuxカーネルの「Dirty COW」、Javaウェブプリケーションフレームワーク「Apache Struts」の脆弱性に起因する、米信用情報会社Equifaxでの情報漏洩などの過去の重大なインシデントで見てきたように、政府の審査が行われており、一部のチームは「良くないオープンソースコンポーネント」（今回はLog4j）を「より安全な代替コンポーネント」に置き換えようとしています。

　しかし、これらのシナリオでは、現代社会におけるオープンソースの信頼性の高さという重要な側面が見落とされています。

　実際に、オープンソースソフトウェアは信頼性が高いと考えられており、一部の組織では、重要なセキュリティレビューを行わず、自由にダウンロードし、そのまま使用しています。つまり、企業が、インターネットからダウンロードしたソフトウェアに対して、自社で開発したソフトウェアに対して行うのと同じレベルのセキュリティレビューを行わない場合があるということです。

　もしオープンソースソフトウェアのセキュリティについて疑問があるなら、組織内でコンテナ仮想化プラットフォーム「Docker」やXMLドキュメントを解析するためのソフトウェアライブラリー「libxml」、またはアプリケーションが依存しているオープンソースのデータベースを評価している担当者に聞いてみてください。

　すべてのオープンソースソフトウェアに対して完全なセキュリティレビューが行われていた場合でも、レビューが行われたのは最初の1回だけで、アップデートのたびに繰り返し行っていないかもしれません。それは、オープンソースの取り組みに対する信頼の証と考えることができるかもしれません（あるいは、レビューやテストのためのリソースが不足しているからかもしれませんが）。

オープンソースソフトウェアはなぜ採用されるのか

　組織がオープンソースを採用する理由はさまざまですが、主に3つの理由があります。

　まず、多くの場合、オープンソースソフトウェアにはライセンス料金が発生しません。個別にソフトウェアを採用する分には予算承認や調達審査の必要がないため、これはある程度魅力的です。

　次に、選択したオープンソースはその分野のエキスパートによって開発されている可能性が高く、その分野のエキスパートを従業員として雇用するよりも容易でコストもかかりません。

　最後に、選択したテクノロジーは、多くの場合、問題に対して評判の良いソリューションです。たとえば、コンテナオーケストレーションに使用できるソリューションは多数ありますが、「Kubernetes」は最も評判の良いソリューションです。つまり、Kubernetesの実装は同僚と競合他社の双方に信頼されていることを意味しているわけです。

　採用の議論で迷いを生じさせるのは、商用ソフトウェアと同様に、多くの場合、オープンソースソフトウェアは複数のコンポーネントから構成されるということです。単独で実行可能なLinux実行ファイルやKubernetes実行ファイルはありません。それぞれが多数の依存ファイルを必要とします。

　同じことが、モバイルアプリケーション、IoTデバイスのファームウェア、イベントの発生に応じてプログラムを実行する環境を提供する「AWS Lambda」にデプロイされている単純なビジネスロジックの関数にも当てはまります。すべてのアプリケーションには、それらが適切に機能するために必要な依存ファイルがあるのです。「ソフトウェアサプライチェーン」と言ったとき、それは、参照している依存ファイルのリストであり、オープンソースを利用する際の最大リスクが存在する依存ファイルのリストなのです。

　Kubernetesなどのオープンソースプロジェクトは、デファクトスタンダード（事実上の業界標準）になるほど評判の良いプロジェクトであり、そのコードに取り組んでいる多くのボランティアの開発者がいます。一部の開発者は、Kubernetesに明示的に取り組むことによって、Kubernetesを使用している企業に雇用されています。

　これはKubernetesの回復力につながります。1人の開発者がプロジェクトを辞めたり引退したりしても、プロジェクトは先に進みます。評判の良いプロジェクトの場合は、主要メンバーがチームを離れても、最小限の中断でそれに対応できます。

セキュリティリスクを低減するには

　しかし、小規模なプロジェクトの場合はそうもいきません。

　オープンソースレポジトリ「GitHub」には、開発者数が1桁台のプロジェクトが数百万あります。そしてGitHubだけがオープンソース活動のリポジトリではありません。それらのプロジェクトで開発者が1人いなくなると、特定の領域のコードがそのように記述された理由を正確に理解している人もいなくなることになります。

　Log4jの場合と同様に、これらは、アプリケーションの依存ファイルのリストに一般に記載されている種類のプロジェクトであり、往々にしてログデータを記録するなどの基本的な動作を実現するためのものなのです。

　オープンソースプロジェクト間で開発者数が大きく異なるため、プロジェクトごとにセキュリティインシデントに対応する方法が異なるのも不思議なことではありません。Kubernetesや仮想化基盤「Xen」など一部のプロジェクトには極めて明確に定義されたセキュリティプロセスがあり、それは優れたプロジェクトであることの表れです。

　それ以外のプロジェクトでは、セキュリティの問題は、今後不確定な時点で解決される単なるバグとして扱われています。明確に定義されたセキュリティプロセスは、パッチが用意された時点でCVE形式のセキュリティ開示に関連付けられることを意味する可能性もあります。

　セキュリティの問題をバグのように扱うプロジェクトでは、バグが修正されるだけでセキュリティ開示は行われない可能性が高くなります。この脆弱性により、企業がソフトウェアサプライチェーンのリスクを定義し、そのリスクを軽減する妥当なポリシーを開発することが難しくなります。

　オープンソースソフトウェアの使用に関連付けられるビジネスリスク（実際にはソフトウェアリスク）を軽減することは、オープンソースソフトウェアを使用するビジネスメリットを受け入れることから始まります。ビジネスリスクの多くは、オープンソースソフトウェアの管理方法が商用ソフトウェアと異なるという現実から生じます。調達プロセスとパッチのプロセスは異なるため、それらが同様に管理されることを期待することは現実的ではありません。

　リスク回避の取り組みは、取得時に使用される取得元や調達プロセスにかかわらず、企業で使用されるすべてのソフトウェアの包括的な資産のインベントリから始める必要があります。資産のインベントリにより、各資産で使用されているオープンソースコンポーネントを確定できるようになります。

　これを行うには、「ソフトウェア構成解析（Software Composition Analysis：SCA）」と呼ばれるツールを使用します。

　また、ソフトウェアはバイナリにコンパイルでき、ソース形式でも使用できるため、選択したSCAツールでバイナリとソースベースの両方の資産を、同等の機能で処理できることが重要です。資産のインベントリには数千ものエントリが存在する可能性があるため、SCAツールによって資産内で資産を再スキャンすることなくセキュリティリスクの変更が事前対応的に警告される必要があります。その時点で、新たな脆弱性の開示に伴うリスクの変化に対応する方法についてガイドラインで規定することができます。結局のところ、存在の有無が分からなかったものに対してパッチを適用することは困難であり、脆弱性を持つコンポーネントを含む新しいソフトウェアがいつ作成されたかを知る由はないのです。

なぜオープンソースの脆弱性管理が重要なのか？

　「ソフトウェアサプライチェーン」の観点では、アプリケーションの運用において対象のアプリケーションを構成するソフトウェアを解析し把握することが重要です。これは新たな脆弱性が発見された際に対処を速やかに行うことを支援してくれる重要な手法で、管理運用対象のアプリケーションが内包するリスクを可視化するための効果的な手段です。

　可視化できたリスクに対してどのような対策が取り得るかは個々の議論となりますが、例えば、Log4jの脆弱性に関して言うならば、脆弱性を修正したバージョンを適用するには、そもそもLog4jが含まれているかどうかを知らなければならないということが重要だということを指摘しています。

　しかし、脆弱性が特定のオープンソースコンポーネントや商用ソフトウェアで発見されても、多くの組織ではすぐにパッチを適用できるわけではなく、問題の発見されたコンポーネントが利用されているかどうかを調査することから始めるか、開発者からの報告を待って対処することになるはずで、対策が実施されるまでの期間が長いほど悪意ある第三者によって攻撃を受け、被害が発生する可能性が高まるということになります。

　そして、これまでは管理運用するアプリケーションに含まれるオープンソースや商用ソフトウェアの一覧は流通していませんでした。そのため、従来型のサイバーセキュリティ対策というのは、アプリケーションやシステムが内包する脆弱性や弱点などの情報を知ることなく構築していたということになります。

　では、従来のサイバーセキュリティ対策との違いはどのようなものか考えてみましょう。

　ウィルス対策ソフトやアプリケーションファイアウォール（WAF）などは、Log4jのようなネットワーク越しに悪用できる脆弱性である「リモートコード実行（RCE）」に対して有効な場合があることはよく知られていますが、これらのツールや技術で対象のアプリケーションを保護するためには「シグネチャ」と呼ばれる通信の手順やパターンと照らし合わせて問題となる通信を遮断する必要があります。この時、「シグネチャ」の定義が不適切な場合は「誤検知」が発生するため、正常な通信を遮断し、攻撃を遮断できない可能性があります。

　いずれの手段を講じるにせよ、Log4jのケースのようにセキュリティアップデートやパッチが提供されているのであれば、適用して悪用される脆弱性を解消するのが最善の策であるはずです。もちろん、運用中のアプリケーションにパッチを当てても動作に影響がないことを確認する必要があることは言うまでもありません。

　さらに、もし運用しているアプリケーションの脆弱性がすべて明らかになれば、適切なセキュリティ対策を選んで実施することができ、無闇に不要な対策にコストを掛けずに済むはずです。

　まさに孫氏の兵法にある「知彼知己者、百戰不殆（彼を知り己を知れば百戦危うからず）」の通り、自らの弱点がわかれば適切かつ効果的な対策を講じることが可能となるわけです。